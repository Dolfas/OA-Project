%% Inicializations
%load('Task9/task_data.mat');
load('racetrack.mat', 'a', 'r', 'v', 'tref', 'xgt');
anchors = a;
range = r;
delta = tref(2) - tref(1);
T = length(v(:,1));  
v_hat = cvx(zeros(T,2));
n_anchors = length(anchors(:,1));
%% Miu = 1
miu = 1;
x_1 = cvx_motion_trajectory(T, n_anchors, anchors, range, delta, miu, v); %Solve optimization problem
plot_trajectory(x_1,xgt); %Verify is the same trajectory
%% Multiple mius
mius = [0.01, 0.1, 1, 10, 100, 1000]';
v_incon = 0.8*v;
x_values = zeros(T, 2*length(mius)); %collumns are x y coordinates in 2-to-2 pairs for each miu
cont = 1;
for i = 1:length(mius)
    miu = mius(i);
    x_values(:,cont:cont+1) = cvx_motion_trajectory(T, n_anchors, anchors, range, delta, miu, v_incon);
    cont = cont +2;
end

%%
% Create a new figure
fig = figure;
set(fig, 'Position', [100,100,1200,800]');
cont_g = 1;
for i = 1:6
    % Extract x and y values for each group of points
    x = x_values(:, cont_g);
    y = x_values(:, cont_g+1);
    
    % Create a subplot with 2 rows and 3 columns
    subplot(2, 3, i);
    
    % Plot the group of points
    plot(x, y, 'bo-', 'filled', 'LineWidth', 2); 
    hold on
    scatter(xgt(:,1), xgt(:,2), 50, 'rx');

    ylim([-0.5,5.5]);
    
    % Add labels, title, etc., if needed
    title(['Plot ' num2str(i)]);
    xlabel('X-axis');
    ylabel('Y-axis');
    cont_g = cont_g +2;
end
%% Solve optimization problem for miu = 1
function x = cvx_motion_trajectory(T, n_anchors, anchors, range, delta, miu, v)
    cvx_begin quiet
        variable x(T, 2);
        expression v_hat(T,2);
        % Build cost function
        static_cost = 0;
        dynamic_cost = 0;
        for i = 1:T 
            for j = 1:n_anchors 
                static_cost = static_cost + square_pos(norm(x(i, :) - anchors(j, :)) - range(i, j));
            end
            if i == 1
                v_hat(i,:) = (x(i + 1, :) - x(i, :))/(delta);
            elseif i == T
                v_hat(i,:)= (x(i, :) - x(i-1, :))/(delta);
            else
                v_hat(i,:) = (x(i + 1, :) - x(i - 1, :))/(2*delta);
            end
            dynamic_cost = dynamic_cost + miu * sum_square(v_hat(i,:) - v(i, :));
        end
        % Define the objective function as the sum of static and dynamic costs
        minimize(static_cost+dynamic_cost)
    cvx_end
end
%% Plotting function
function plot_trajectory(x, xgt)
    %% Check if solution agrees with trajectory
    % Create a scatter plot for x with circular markers and connecting lines
    plot(x(:,1), x(:,2), 'o-', 'LineWidth', 1, 'DisplayName', 'x');
    hold on;
    
    % Create a scatter plot for xgt with 'x' markers
    scatter(xgt(:,1), xgt(:,2), 'x', 'DisplayName', 'xgt');
    
    xlabel('Horizontal Coordinate');
    ylabel('Vertical Coordinate');
    title('Plot of x and xgt with Connecting Lines');
    grid on;
    
    % Adjust legend size 
    
    lgd = legend('Location', 'Best');
    set(lgd, 'FontSize', 10);
    
    % Hold off to stop overlaying on the same figure
    hold off;
end