%% Main script

% Define the bounding box
x_lim = [-20, 20];
y_lim = [-20, 20];
T = 50;  % Number of samples
aux_vel=5;
vel = [aux_vel*0.5; aux_vel*0.5];
vel_2 = [-1.7254; 3.0880];
v = norm(vel)  % Velocity of the target (m/s)
scalar = 5;
noise_std = 0.2*scalar;  % Standard deviation of noise

[x0, anchor_position] = initPoints(x_lim, y_lim);
[x, y, tref] = getLinearTrajectory(x0, vel, x_lim, y_lim, T);
[x_2, y_2, tref_2] = getLinearTrajectory(x0, vel_2, x_lim, y_lim, T);
plotMeasurements(x,y, x_2, y_2, x0, anchor_position);

% Calculate true range and range rate
r_star = sqrt((x - anchor_position(1)).^2 + (y - anchor_position(2)).^2);

% Calculate the range rate for each time instant
u = calculateUnitAngular(x, y, anchor_position, T);
s_star = calculateRangeRate(vel, u, T);

%Add noise to measurements
r_noise = r_star + noise_std * randn(1, T);
s_noise = s_star + noise_std * randn(1, T); 

plotRangeAndRangeRate(r_star, s_star, r_noise, s_noise);

% Calculate final u (Measured angular direction vectors)
u_final = zeros(2, 1, T);  % Assuming one anchor
for t = 1:T
    u_final(:, 1, t) = [x(t) - anchor_position(1), y(t) - anchor_position(2)] / norm([x(t) - anchor_position(1), y(t) - anchor_position(2)]);
end



% Calculate xgt (Ground-truth source positions) and vgt (Ground-truth source velocities)
xgt = [x0(1) + vel(1) * tref; x0(2) + vel(2) * tref];
vgt = repmat(vel, 1, T);

% Save the measurements to a MATLAB file
measurements = struct(...
    'a', anchor_position, ...
    'r', r_star', ...
    'rr', s_star', ...
    'tref', tref', ...
    'u', u_final, ...
    'v', repmat([vel(1), vel(2)], T, 1), ...
    'vgt', vgt' , ...
    'xgt', xgt');

% Save the measurements structure to a MATLAB file
save('measurements.mat', '-struct','measurements');

%% Get init points
function [x0,anchor_position] = initPoints(x_lim, y_lim)
    x0 = [x_lim(1), y_lim(1)];
    %anchor_position = [randi([x_lim(1), x_lim(2)]), randi([y_lim(1), y_lim(2)])];  
    anchor_position = [-15,16];
    distance = calculateDistance(x0, anchor_position);% Distance between anchor and target
    %disp("Initial Distance:");
    %disp(distance);
    while (distance < 30) 
        anchor_position = [randi([x_lim(1), x_lim(2)]), randi([y_lim(1), y_lim(2)])];  % Distance between anchor and target;  % Anchor position
        distance = calculateDistance(x0, anchor_position);
        %disp("Distance:");
        %disp(distance);
    end
    %disp("Anchor Position:");
    %disp(anchor_position);
    %disp("Initial Position (x0):");
    %disp(x0);
end
%% Calculate distance
function distance = calculateDistance(point1, point2)
    % Calculate the Euclidean distance
    if length(point1) ~= length(point2)
        error('Input points must have the same dimensionality.');
    end
    squaredDifferences = (point1 - point2).^2;
    distance = sqrt(sum(squaredDifferences));
end
%% Generate Linear Trajectory
function [x, y, t] = getLinearTrajectory(x0, vel, x_lim, y_lim, T)
    % Generate time instants
    t = linspace(0, 8, T);
    
    x = x0(1) + vel(1) * t;
    y = x0(2) + vel(2) * t;


end
%% Calculate the unit angular vector u for each time instant
function u = calculateUnitAngular(x, y, anchor_position, T)
    u = zeros(T, 2); % Initialize a T-by-2 matrix
    for t = 1:T
        u(t, :) = [x(t) - anchor_position(1), y(t) - anchor_position(2)] / norm([x(t) - anchor_position(1), y(t) - anchor_position(2)]);
    end
end
%% Calculate Range Rate
function s_star = calculateRangeRate(vel, u, T)
    s_star = zeros(1, T);
    for t = 1:T
        s_star(t) = dot(vel, u(t, :));
    end
end
%% Plot trajectory and measurements
function plotMeasurements(x, y, x_2, y_2, x0, anchor_position)
    figure;
    plot(x, y, 'b-', 'LineWidth', 2);
    hold on;
    plot(x_2, y_2, 'c-', 'LineWidth', 2);
    hold on;
    plot(x0(1), x0(2), 'go', 'MarkerSize', 10, 'LineWidth', 2);  % Initial position
    plot(anchor_position(1), anchor_position(2), 'ro', 'MarkerSize', 10, 'LineWidth', 2);  % Anchor position
    xlabel('X Coordinate (m)');
    ylabel('Y Coordinate (m)');
    title('Simulated 2D Linear Trajectory and Measurements');
    'Simulated trajectory with velocity corresponding to different local minima'
    legend('Simulated Trajectory', 'Simulated Trajectory', 'Initial Position', 'Anchor Position');
    grid on;
end
%% Display the range and range rate measurements
function plotRangeAndRangeRate(r_star, s_star, r_noise, s_noise)
    % Plot range with noise
    figure;
    subplot(2, 1, 1);
    plot(r_star, 'b', 'LineWidth', 2);
    hold on;
    plot(r_noise, 'r--', 'LineWidth', 1);
    title('True Range vs. Noisy Range');
    legend('True Range', 'Noisy Range');
    xlabel('Time Step');
    ylabel('Range (m)');
    grid on;
    
    % Plot range rate with noise
    subplot(2, 1, 2);
    plot(s_star, 'b', 'LineWidth', 2);
    hold on;
    plot(s_noise, 'r--', 'LineWidth', 1);
    title('True Range Rate vs. Noisy Range Rate');
    legend('True Range Rate', 'Noisy Range Rate');
    xlabel('Time Step');
    ylabel('Range Rate (m/s)');
    grid on;
end

